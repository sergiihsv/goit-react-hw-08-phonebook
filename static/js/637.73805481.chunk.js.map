{"version":3,"file":"static/js/637.73805481.chunk.js","mappings":"mPAwEA,UA/DkB,WAChB,IAEMA,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAWMC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBN,SAAUG,EAAAA,KAAaG,aAGzB,OACE,UAAC,IAAD,CACEC,UAAU,OACVC,GAAI,CACFC,MAAO,OACPC,QAAS,kBACTC,MAAO,eACPC,EAAG,GAELC,SAAUX,EACVY,SAxBiB,SAAAC,GACnBA,EAAMC,iBACNrB,EAASsB,EAAAA,EAAAA,UAAyB,CAAEnB,MAAAA,EAAOE,SAAAA,KAC3CD,EAAS,IACTE,EAAY,IACZc,EAAMG,cAAcC,SAUpB,WAWE,SAAC,IAAD,CACEC,QAAQ,KACRb,UAAU,KACVI,MAAM,UACNH,GAAI,CAAEa,SAAU,GAJlB,SAhCc,iEAwCd,SAAC,IAAD,CACEC,GAAG,QACHC,MAAM,mBACNH,QAAQ,WACRZ,GAAI,CAAEgB,EAAE,GACRC,SAAU,SAAAC,GAAC,OAAI3B,EAAS2B,EAAEC,OAAOC,WAEnC,SAAC,IAAD,CACEN,GAAG,WACHO,KAAK,WACLN,MAAM,sBACNH,QAAQ,WACRZ,GAAI,CAAEgB,EAAE,GACRC,SAAU,SAAAC,GAAC,OAAIzB,EAAYyB,EAAEC,OAAOC,WAEtC,SAAC,IAAD,CAAQR,QAAQ,YAAYU,KAAK,SAASD,KAAK,SAASrB,GAAI,CAAEgB,EAAE,GAAhE","sources":["pages/LoginPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport authOperations from '../api/authification';\n\nconst LoginPage = () => {\n  const loginMessage = `Please, enter the login information to use the application.`;\n\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(authOperations.loginUser({ email, password }));\n    setEmail('');\n    setPassword('');\n    event.currentTarget.reset();\n  };\n\n  //Схема валидации\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    password: yup.string().required(),\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        width: '100%',\n        bgcolor: 'background.main',\n        color: 'text.primary',\n        p: 3,\n      }}\n      validate={schema}\n      onSubmit={handleSubmit}\n    >\n      <Typography\n        variant=\"h6\"\n        component=\"h2\"\n        color=\"inherit\"\n        sx={{ flexGrow: 1}}\n      >\n        {loginMessage}\n      </Typography>\n      <TextField\n        id=\"email\"\n        label=\"Enter your email\"\n        variant=\"standard\"\n        sx={{ m:2}}\n        onChange={e => setEmail(e.target.value)}\n      />\n      <TextField\n        id=\"password\"\n        type=\"password\"\n        label=\"Enter your password\"\n        variant=\"standard\"\n        sx={{ m:2}}\n        onChange={e => setPassword(e.target.value)}\n      />\n      <Button variant=\"contained\" size=\"medium\" type=\"submit\" sx={{ m:2}}>\n        Submit\n      </Button>\n    </Box>\n  );\n};\n\nexport default LoginPage;"],"names":["dispatch","useDispatch","useState","email","setEmail","password","setPassword","schema","yup","shape","name","required","component","sx","width","bgcolor","color","p","validate","onSubmit","event","preventDefault","authOperations","currentTarget","reset","variant","flexGrow","id","label","m","onChange","e","target","value","type","size"],"sourceRoot":""}